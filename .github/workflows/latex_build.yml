name: Build and Release LaTeX AGBs

on:
  push:
    branches:
      - main
    tags:
      - 'v*'          # # Trigger bei Tags wie v1.0.0, v2.1 etc.
  workflow_dispatch:  # Optional: manueller Trigger Ã¼ber GitHub UI

permissions:
  contents: write

jobs:
  create_version:
    runs-on: ubuntu-latest

    outputs:
      tag_version: ${{ steps.setver.outputs.tag_version }}
      semver: ${{ steps.semver.outputs.version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          branch: main
          tag_prefix: "v"
          major_pattern: "^(feat|fix|refactor)!:"
          minor_pattern: "^feat:"
          search_commit_body: true

      - name: Log generated version
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "Detected Git tag: ${GITHUB_REF_NAME}"
            # Strip leading 'v' manually
            echo "TAG_VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          else
            echo "Generated semver: ${{ steps.semver.outputs.version }}"
            echo "TAG_VERSION=${{ steps.semver.outputs.version }}" \
              >> $GITHUB_ENV
          fi
      
      - name: Export TAG_VERSION to job outputs
        id: setver
        run: echo "tag_version=${TAG_VERSION#v}" >> $GITHUB_OUTPUT


  build_latex:
    needs: create_version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: [agb_privat, agb_geschaeft]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Release Version
        id: get_version
        run: |
          echo "TAG_VERSION=${{ needs.create_version.outputs.tag_version }}" \
            >> $GITHUB_ENV
      
      - name: Create version.tex
        run: |
          echo "\\newcommand{\\version}{${TAG_VERSION}}" \
            > version.tex

      - name: Compile LaTeX document ${{ matrix.file }}.tex
        uses: dante-ev/latex-action@latest
        with:
          root_file: ${{ matrix.file }}.tex
          args: -synctex=0 -interaction=nonstopmode --shell-escape -pdf -file-line-error

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.file }}-pdf
          path: ${{ matrix.file }}.pdf

      - name: Append to pdf_list.txt
        run: |
          mkdir -p pdflist
          echo "${{ matrix.file }}-pdf/${{ matrix.file }}.pdf" >> pdflist/pdf_list.txt

      - name: Upload pdf_list.txt
        uses: actions/upload-artifact@v4
        with:
          name: pdf-list-${{ matrix.file }}
          path: pdflist/pdf_list.txt

  create_release:
    needs: 
      - build_latex 
      - create_version
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "Commits since $LAST_TAG:"
          echo "## Changelog since $LAST_TAG" > changelog.md
          git log "$LAST_TAG"..HEAD --pretty=format:"- %s (%an)" \
            >> changelog.md
          
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get Release Version
        id: get_version
        run: |
          echo "TAG_VERSION=${{ needs.create_version.outputs.tag_version }}" \
            >> $GITHUB_ENV
          echo "SEM_VERSION=${{ needs.create_version.outputs.semver }}" \
            >> $GITHUB_ENV

      - name: List downloaded files
        run: ls -R artifacts

      - name: Install pdfunite
        run: sudo apt-get update && sudo apt-get install -y poppler-utils

      - name: Merge PDFs into a single file
        run: |
          > artifacts/pdf_list_absolute.txt
          for f in $(find artifacts -name "pdf_list.txt"); do
            while read -r line; do
              echo "artifacts/$line" >> artifacts/pdf_list_absolute.txt
            done < "$f"
          done

          echo "PDFs to merge:"
          cat artifacts/pdf_list_absolute.txt

          pdfunite $(cat artifacts/pdf_list_absolute.txt) \
            artifacts/AGB_Gesamt.pdf
      
      - name: Rename PDFs with version suffix
        run: |
          echo "Tag version: ${TAG_VERSION}"
          mkdir -p artifacts/versioned
          while read -r pdf; do
            base=$(basename "$pdf" .pdf)
            cp "$pdf" "artifacts/versioned/${base}_${TAG_VERSION}.pdf"
          done < artifacts/pdf_list_absolute.txt

          cp artifacts/AGB_Gesamt.pdf \
            artifacts/versioned/AGB_Gesamt_${TAG_VERSION}.pdf

      - name: Create file list
        run: |
          echo artifacts/versioned/*.pdf > filelist.txt
          cat artifacts/pdf_list_absolute.txt >> filelist.txt
          echo "Content of filelist.txt:"
          cat filelist.txt

      - name: Set RELEASE_FILES
        run: |
          FILES=$(paste -sd' ' filelist.txt)
          echo "RELEASE_FILES=$FILES" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.SEM_VERSION }}
          name: "Release v${{ env.SEM_VERSION }}"
          files: ${{ env.RELEASE_FILES }}
          body_path: changelog.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEM_VERSION: ${{ needs.create_version.outputs.semver }}
